
name: SonarCloud API
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - 'features/**'
jobs:
  build:
    name: SonarCloud Analyze API
    runs-on: windows-latest
    steps:
      - name: Check modified files
        uses: yumemi-inc/path-filter@v2
        id: path-filter
        with:
          patterns: |
            api/**
      - name: Set up JDK 17
        if: steps.path-filter.outputs.exists == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Configure Git
        if: steps.path-filter.outputs.exists == 'true'
        run: |
          git config --system core.longpaths true
      - uses: actions/checkout@v3
        if: steps.path-filter.outputs.exists == 'true'
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up DotNet
        if: steps.path-filter.outputs.exists == 'true'
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: api/global.json
      - name: Cache SonarCloud packages
        if: steps.path-filter.outputs.exists == 'true'
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        if: steps.path-filter.outputs.exists == 'true'
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      #- name: NuGet Login
      #  if: steps.path-filter.outputs.exists == 'true'
      #  run: |
      #    dotnet nuget update source smartwyre -s https://pkgs.dev.azure.com/smartwyre/smartwyre/_packaging/smartwyre/nuget/v3/index.json -u az -p ${{ secrets.AZURE_DEVOPS_TOKEN }} --configfile .\api\nuget.config
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true' && steps.path-filter.outputs.exists == 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Install DotNet Coverage
        if: steps.path-filter.outputs.exists == 'true'
        run: |
          dotnet tool install --global dotnet-coverage
      - name: Run DotNet Restore
        if: steps.path-filter.outputs.exists == 'true'
        run: |
          dotnet restore .\api
      - name: Run Build and Analyze API
        if: steps.path-filter.outputs.exists == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_API }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"jforage-sw_test-app" /n:"MyTestApp API" /o:"jforage-sw" /d:sonar.token="${{ secrets.SONAR_TOKEN_API }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml /d:sonar.coverage.exclusions=src/**/Program.cs,src/**/Startup.cs /d:sonar.exclusions=src/**/Migrations/**/*,tests/**/*
          dotnet build .\api --no-restore --no-incremental /property:WarningLevel=0
          dotnet-coverage collect "dotnet test .\api --no-build --no-restore" -f xml -o "coverage.xml"
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN_API }}"
